#!/bin/env python3
import json
import subprocess
import sys
from pathlib import Path


CONFIG = "/etc/px.conf"
CADDY = "/etc/caddy/conf.d/pretalx.conf"
SOCKET = "/run/gunicorn/pretalx_{}"
PYTHON_VERSION = f"{sys.version_info.major}.{sys.version_info.minor}"


def print_help():
    message = """px is a pretalx helper tool, made for pretalx.com

Usage:
  px status  Show information on the currently running pretalx
  px run     Run a command with the current pretalx, e.g. px run shell_scoped --override
  px update  Update to a given git ref, or main, if none was given.
     --no-plugins  Skips plugin updates
     --skip-rebuild  Skips the rebuild step
  px init    Install all configured plugins
     --system  Install all configured plugins and pretalx itself
"""
    print(message)


def subprocess_run(commands, **kwargs):
    command = " ".join(commands)
    location = ""
    if "cwd" in kwargs:
        location = f" in {kwargs['cwd']}"
    print(f"Running command{location}:\n    {command}", flush=True)
    return subprocess.run(commands, **kwargs)


def get_config():
    try:
        with open(CONFIG, "r") as f:
            config = json.load(f)
    except Exception:
        config = None
    if not config:
        config = {
            "user": "pretalx",
            "venvs": ["green", "blue"],
            "current": "green",
            "version": None,
            "plugins": [
                {
                    "name": "pretalx-com",
                    "repository": "git@github.com:rixx/pretalx-com.git",
                },
                {
                    "name": "pretalx-downstream",
                    "repository": "git@github.com:pretalx/pretalx-downstream.git",
                },
                {
                    "name": "pretalx-media-ccc-de",
                    "repository": "git@github.com:pretalx/pretalx-media-ccc-de.git",
                },
            ],
        }
        save_config(config=config)
    return config


def save_config(*, config):
    with open(CONFIG, "w") as f:
        json.dump(config, f, indent=4)


def status(*, args):
    config = get_config()
    for key, value in config.items():
        print(f"{key}: {value}")


def pretalx_run(*, args, env=None, config=None, chdir=True):
    config = config or get_config()
    if not env:
        env = config.get("current")
    if not env:
        raise Exception("Can't determine venv to run command in.")
    user = config["user"]
    path = f"/var/lib/{user}/{env}/bin/python"
    subprocess_run(
        [path, "-m", "pretalx", *args],
        check=True,
        cwd=f"/var/lib/{user}/" if chdir else None,
    )


def update(*, args):
    no_plugins = "--no-plugins" in args
    skip_rebuild = "--skip-rebuild" in args
    args = [arg for arg in args if arg not in ["--no-plugins", "--skip-rebuild"]]
    if len(args) > 1:
        raise Exception("update requires a single argument")
    if len(args) == 0:
        version = "main"
    else:
        version = args[0]
    config = get_config()
    user = config["user"]
    current_venv = config["current"]
    next_venv = [venv for venv in config["venvs"] if venv != current_venv][0]
    cwd = f"/var/lib/{user}"
    path = f"{cwd}/{next_venv}/bin/pip"
    if not no_plugins:
        print("Updating plugins …")
        for plugin in config.get("plugins", []):
            plugin_path = f"{cwd}/plugins/{plugin['name']}"
            subprocess_run(
                [
                    "git",
                    "pull",
                ],
                cwd=plugin_path,
                check=True,
            )
    else:
        print("Skipping plugin updates")

    # Apparently, updates from git are currently not guaranteed? I'm not sure what broke, but this fixes it.
    print("Uninstalling old version …")
    subprocess_run(
        [
            path,
            "uninstall",
            "-y",
            "pretalx",
        ],
        check=True,
        cwd=cwd,
    )

    print("Installing new version …")
    subprocess_run(
        [
            path,
            "install",
            "-U",
            "--upgrade-strategy",
            "eager",
            f"git+https://github.com/pretalx/pretalx.git@{version}#egg=pretalx",
            "django_redis",
            "gunicorn",
            "wheel",
            "redis",
            "django_extensions",
            "ipython",
            "psycopg2-binary",
        ],
        check=True,
        cwd=cwd,
    )
    subprocess_run(
        [
            "cp",
            f"{cwd}/override_settings.py",
            f"{cwd}/{next_venv}/lib/python{PYTHON_VERSION}/site-packages/pretalx/"
        ]
    )
    print("Migrating …")
    pretalx_run(args=["migrate"], env=next_venv, config=config)
    if not skip_rebuild:
        print("Rebuilding static files …")
        pretalx_run(args=["rebuild", "--silent"], env=next_venv, config=config)
    else:
        print("Skipping static file rebuild …")
    print("Regenerating CSS …")
    pretalx_run(args=["regenerate_css", "--silent"], env=next_venv, config=config)
    print("Stopping old celery worker …")
    subprocess_run(
        ["sudo", "systemctl", "stop", f"pretalx-worker@{current_venv}.service"],
        check=True,
        cwd=cwd,
    )
    subprocess_run(
        ["sudo", "systemctl", "disable", f"pretalx-worker@{current_venv}.service"],
        check=True,
        cwd=cwd,
    )
    print("Starting new celery worker …")
    subprocess_run(
        ["sudo", "systemctl", "start", f"pretalx-worker@{next_venv}.service"],
        check=True,
        cwd=cwd,
    )
    subprocess_run(
        ["sudo", "systemctl", "enable", f"pretalx-worker@{next_venv}.service"],
        check=True,
        cwd=cwd,
    )
    print("Starting new pretalx process …")
    subprocess_run(
        ["sudo", "systemctl", "start", f"pretalx@{next_venv}.service"],
        check=True,
        cwd=cwd,
    )
    subprocess_run(
        ["sudo", "systemctl", "start", f"pretalx@{next_venv}.socket"],
        check=True,
        cwd=cwd,
    )
    subprocess_run(
        ["sudo", "systemctl", "enable", f"pretalx@{next_venv}.service"],
        check=True,
        cwd=cwd,
    )
    subprocess_run(
        ["sudo", "systemctl", "enable", f"pretalx@{next_venv}.socket"],
        check=True,
        cwd=cwd,
    )
    print("Changing caddy config …")
    subprocess_run(
        ["sudo", "sed", "-i", f"s/{current_venv}/{next_venv}/g", CADDY],
        check=True,
        cwd=cwd,
    )
    print("Reloading caddy …")
    subprocess_run(["sudo", "systemctl", "reload", "caddy"], check=True, cwd=cwd)
    print("Stopping old pretalx process …")
    subprocess_run(
        ["sudo", "systemctl", "stop", f"pretalx@{current_venv}.service"],
        check=True,
        cwd=cwd,
    )
    subprocess_run(
        ["sudo", "systemctl", "stop", f"pretalx@{current_venv}.socket"],
        check=True,
        cwd=cwd,
    )
    subprocess_run(
        ["sudo", "systemctl", "disable", f"pretalx@{current_venv}.socket"],
        check=True,
        cwd=cwd,
    )
    subprocess_run(
        ["sudo", "systemctl", "disable", f"pretalx@{current_venv}.service"],
        check=True,
        cwd=cwd,
    )

    config["current"] = next_venv
    config["version"] = version
    save_config(config=config)


def init(*, args):
    config = get_config()
    user = config["user"]
    print("Installing plugins …")
    cwd = f"/var/lib/{user}"
    if "--system" in args:
        for venv in config["venvs"]:
            path = f"{cwd}/{venv}/bin/pip"
            if not Path(path).exists():
                subprocess_run(
                    [
                        "python3",
                        "-m",
                        "venv",
                        venv,
                    ],
                    check=True,
                    cwd=cwd,
                )
            version = "main"
            # run install
            subprocess_run(
                [
                    path,
                    "install",
                    "--upgrade-strategy",
                    "eager",
                    "-U",
                    "gunicorn",
                    "wheel",
                    "psycopg2-binary",
                    "django_redis",
                    "redis",
                    "django_extensions",
                    "ipython",
                    f"git+https://github.com/pretalx/pretalx.git@{version}#egg=pretalx",
                ],
                check=True,
                cwd=cwd,
            )
    for plugin in config.get("plugins", []):
        plugin_path = f"{cwd}/plugins/{plugin['name']}"
        if not Path(plugin_path).exists():
            subprocess_run(
                [
                    "git",
                    "clone",
                    plugin["repository"],
                    plugin_path,
                ],
                check=True,
                cwd=cwd,
            )
            for venv in config["venvs"]:
                # install and activate plugins
                path = f"{cwd}/{venv}/bin/pip"
                subprocess_run(
                    [
                        path,
                        "install",
                        "--upgrade-strategy",
                        "eager",
                        "-Ue",
                        ".",
                    ],
                    cwd=plugin_path,
                    check=True,
                )


def main():
    if len(sys.argv) == 1:
        print_help()
        sys.exit(-1)

    commands = {
        "status": status,
        "run": pretalx_run,
        "update": update,
        "init": init,
    }

    command = sys.argv[1]
    args = sys.argv[2:]

    if command not in commands:
        print_help()
        sys.exit(-1)

    commands[command](args=args)


if __name__ == "__main__":
    main()
