#!/bin/env python3
import json
import subprocess
import sys


CONFIG = "/etc/px.conf"
NGINX = "/etc/nginx/sites/pretalx.conf"
SOCKET = "/run/gunicorn/pretalx_{}"


def print_help():
    message = """px is a pretalx helper tool, made for pretalx.com

Usage:
  px status  Show information on the currently running pretalx
  px run     Run a command with the current pretalx, e.g. px run shell_scoped --override
  px update  Update to a given git ref, or master, if none was given.
"""
    print(message)


def get_config():
    try:
        with open(CONFIG, "r") as f:
            config = json.load(f)
    except Exception:
        config = None
    if not config:
        config = {
            "user": "pretalx",
            "venvs": ["green", "blue"],
            "current": "green",
            "version": None,
            "plugins": [
                {
                    "name": "pretalx-com",
                    "repository": "git@github.com:rixx/pretalx-com.git",
                },
                {
                    "name": "pretalx-downstream",
                    "repository": "git@github.com:pretalx/pretalx-downstream.git",
                },
                {
                    "name": "pretalx-media-ccc-de",
                    "repository": "git@github.com:pretalx/pretalx-media-ccc-de.git",
                },
            ],
        }
        save_config(config=config)
    return config


def save_config(*, config):
    with open(CONFIG, "w") as f:
        json.dump(config, f, indent=4)


def status(*, args):
    config = get_config()
    for key, value in config.items():
        print(f"{key}: {value}")


def run(*, args, env=None, config=None, chdir=True):
    config = config or get_config()
    if not env:
        env = config.get("current")
    if not env:
        raise Exception("Can't determine venv to run command in.")
    user = config["user"]
    venv = config["current"]
    path = f"/var/lib/{user}/{venv}/bin/python"
    subprocess.run(
        [path, "-m", "pretalx", *args],
        check=True,
        cwd=f"/var/lib/{user}/" if chdir else None,
    )


def update(*, args):
    if len(args) > 1:
        raise Exception("update requires a single argument")
    if len(args) == 0:
        version = "master"
    else:
        version = args[0]
    config = get_config()
    user = config["user"]
    current_venv = config["current"]
    next_venv = [venv for venv in config["venvs"] if venv != current_venv][0]
    cwd = f"/var/lib/{user}"
    path = f"{cwd}/{next_venv}/bin/pip"
    print("Updating plugins …")
    for plugin in config.get("plugins", []):
        plugin_path = f"{cwd}/plugins/{plugin['name']}"
        subprocess.run(["git", "pull",], cwd=plugin_path, check=True)

    print("Installing new version …")
    subprocess.run(
        [
            path,
            "install",
            "-U",
            f"git+git://github.com/pretalx/pretalx.git@{version}#egg=pretalx&subdirectory=src",
            "django_redis",
            "gunicorn",
            "redis",
            "django_extensions",
            "ipython",
            "psycopg2-binary",
        ],
        check=True,
        cwd=cwd,
    )
    print("Migrating …")
    run(args=["migrate"], env=next_venv, config=config)
    print("Rebuilding static files …")
    run(args=["rebuild", "--silent"], env=next_venv, config=config)
    print("Regenerating CSS …")
    run(args=["regenerate_css", "--silent"], env=next_venv, config=config)
    print("Stopping old celery worker …")
    subprocess.run(
        ["sudo", "systemctl", "stop", f"pretalx-worker@{current_venv}.service"],
        check=True,
        cwd=cwd,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", f"pretalx-worker@{current_venv}.service"],
        check=True,
        cwd=cwd,
    )
    print("Starting new celery worker …")
    subprocess.run(
        ["sudo", "systemctl", "start", f"pretalx-worker@{next_venv}.service"],
        check=True,
        cwd=cwd,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", f"pretalx-worker@{next_venv}.service"],
        check=True,
        cwd=cwd,
    )
    print("Starting new pretalx process …")
    subprocess.run(
        ["sudo", "systemctl", "start", f"pretalx@{next_venv}.service"],
        check=True,
        cwd=cwd,
    )
    subprocess.run(
        ["sudo", "systemctl", "start", f"pretalx@{next_venv}.socket"],
        check=True,
        cwd=cwd,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", f"pretalx@{next_venv}.service"],
        check=True,
        cwd=cwd,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", f"pretalx@{next_venv}.socket"],
        check=True,
        cwd=cwd,
    )
    print("Changing nginx config …")
    subprocess.run(
        ["sudo", "sed", "-i", f"s/{current_venv}/{next_venv}/g", NGINX],
        check=True,
        cwd=cwd,
    )
    print("Reloading nginx …")
    subprocess.run(["sudo", "systemctl", "reload", "openresty"], check=True, cwd=cwd)
    print("Stopping old pretalx process …")
    subprocess.run(
        ["sudo", "systemctl", "stop", f"pretalx@{current_venv}.service"],
        check=True,
        cwd=cwd,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", f"pretalx@{current_venv}.socket"],
        check=True,
        cwd=cwd,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", f"pretalx@{current_venv}.socket"],
        check=True,
        cwd=cwd,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", f"pretalx@{current_venv}.service"],
        check=True,
        cwd=cwd,
    )

    config["current"] = next_venv
    config["version"] = version
    save_config(config=config)


def init(*, args):
    config = get_config()
    user = config["user"]
    print("Installing plugins …")
    cwd = f"/var/lib/{user}"
    for plugin in config.get("plugins", []):
        plugin_path = f"{cwd}/plugins/{plugin['name']}"
        subprocess.run(
            ["git", "clone", plugin["repository"], plugin_path,], check=True, cwd=cwd
        )
    for venv in config["venvs"]:
        # install and activate plugins
        path = f"{cwd}/{venv}/bin/python"
        for plugin in config.get("plugins", []):
            plugin_path = f"{cwd}/plugins/{plugin['name']}"
            subprocess.run(
                [path, "setup.py", "develop",], cwd=plugin_path, check=True,
            )
        path = f"/var/lib/{user}/{venv}/bin/pip"
        version = "master"
        # run install
        subprocess.run(
            [
                path,
                "install",
                "-U",
                "gunicorn",
                "psycopg2-binary",
                "django_redis",
                "redis",
                "django_extensions",
                "ipython",
                f"git+git://github.com/pretalx/pretalx.git@{version}#egg=pretalx&subdirectory=src",
            ],
            check=True,
            cwd=cwd,
        )


def main():
    if len(sys.argv) == 1:
        print_help()
        sys.exit(-1)

    commands = {
        "status": status,
        "run": run,
        "update": update,
        "init": init,
    }

    command = sys.argv[1]
    args = sys.argv[2:]

    if command not in commands:
        print_help()
        sys.exit(-1)

    commands[command](args=args)


if __name__ == "__main__":
    main()
